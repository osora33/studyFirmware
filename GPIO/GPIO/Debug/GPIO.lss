
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  00000350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f3  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000851  00000000  00000000  00000de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c7  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000019fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040d  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000325  00000000  00000000  00001e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000021b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	57 c0       	rjmp	.+174    	; 0xc8 <__vector_6>
  1a:	00 00       	nop
  1c:	69 c0       	rjmp	.+210    	; 0xf0 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	24 d0       	rcall	.+72     	; 0x10c <main>
  c4:	ef c0       	rjmp	.+478    	; 0x2a4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_6>:
#include <util/delay.h>
#include <avr/interrupt.h>

int stop = 0;

SIGNAL(INT5_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	stop = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  de:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_7>:

SIGNAL(INT6_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
	stop = 0;
  fa:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
  fe:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
}
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <main>:

int main(){
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	64 97       	sbiw	r28, 0x14	; 20
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0XFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0X10;
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x00;
 130:	12 b8       	out	0x02, r1	; 2
	int arr[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6f};
 132:	84 e1       	ldi	r24, 0x14	; 20
 134:	e0 e0       	ldi	r30, 0x00	; 0
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	01 90       	ld	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	8a 95       	dec	r24
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x30>
	int th;
	int hu;
	int te;
	int on;
	
	EIMSK = 0x60;
 144:	80 e6       	ldi	r24, 0x60	; 96
 146:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x3C;
 148:	8c e3       	ldi	r24, 0x3C	; 60
 14a:	8a bf       	out	0x3a, r24	; 58
	sei();
 14c:	78 94       	sei
	DDRA = 0XFF;
	DDRD = 0X10;
	DDRE = 0x00;
	int arr[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6f};
	
	int time = 9999;
 14e:	2f e0       	ldi	r18, 0x0F	; 15
 150:	37 e2       	ldi	r19, 0x27	; 39
	
	EIMSK = 0x60;
	EICRB = 0x3C;
	sei();
	
	while(time >= 0){
 152:	70 c0       	rjmp	.+224    	; 0x234 <main+0x128>
		for(int i = 25; i > 0; i--){
			th = time/1000;
 154:	c9 01       	movw	r24, r18
 156:	68 ee       	ldi	r22, 0xE8	; 232
 158:	73 e0       	ldi	r23, 0x03	; 3
 15a:	7d d0       	rcall	.+250    	; 0x256 <__divmodhi4>
			DDRD = 0X10;
 15c:	40 e1       	ldi	r20, 0x10	; 16
 15e:	41 bb       	out	0x11, r20	; 17
			PORTA = arr[th];
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	e1 e0       	ldi	r30, 0x01	; 1
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ec 0f       	add	r30, r28
 16a:	fd 1f       	adc	r31, r29
 16c:	e6 0f       	add	r30, r22
 16e:	f7 1f       	adc	r31, r23
 170:	40 81       	ld	r20, Z
 172:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	e2 e4       	ldi	r30, 0x42	; 66
 176:	f7 e0       	ldi	r31, 0x07	; 7
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x6c>
			_delay_ms(1);
			
			hu = (time%1000)/100;
 17c:	0f 2e       	mov	r0, r31
 17e:	f4 e6       	ldi	r31, 0x64	; 100
 180:	ef 2e       	mov	r14, r31
 182:	f1 2c       	mov	r15, r1
 184:	f0 2d       	mov	r31, r0
 186:	b7 01       	movw	r22, r14
 188:	66 d0       	rcall	.+204    	; 0x256 <__divmodhi4>
			DDRD = 0X20;
 18a:	80 e2       	ldi	r24, 0x20	; 32
 18c:	81 bb       	out	0x11, r24	; 17
			PORTA = arr[hu];
 18e:	fb 01       	movw	r30, r22
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	8c 0f       	add	r24, r28
 19a:	9d 1f       	adc	r25, r29
 19c:	e8 0f       	add	r30, r24
 19e:	f9 1f       	adc	r31, r25
 1a0:	80 81       	ld	r24, Z
 1a2:	8b bb       	out	0x1b, r24	; 27
 1a4:	e2 e4       	ldi	r30, 0x42	; 66
 1a6:	f7 e0       	ldi	r31, 0x07	; 7
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x9c>
			_delay_ms(1);
			
			te = (time%100)/10;	
 1ac:	c9 01       	movw	r24, r18
 1ae:	b7 01       	movw	r22, r14
 1b0:	52 d0       	rcall	.+164    	; 0x256 <__divmodhi4>
 1b2:	0f 2e       	mov	r0, r31
 1b4:	fa e0       	ldi	r31, 0x0A	; 10
 1b6:	ef 2e       	mov	r14, r31
 1b8:	f1 2c       	mov	r15, r1
 1ba:	f0 2d       	mov	r31, r0
 1bc:	b7 01       	movw	r22, r14
 1be:	4b d0       	rcall	.+150    	; 0x256 <__divmodhi4>
			DDRD = 0X40;
 1c0:	80 e4       	ldi	r24, 0x40	; 64
 1c2:	81 bb       	out	0x11, r24	; 17
			PORTA = arr[te] | 0x80;
 1c4:	fb 01       	movw	r30, r22
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	8c 0f       	add	r24, r28
 1d0:	9d 1f       	adc	r25, r29
 1d2:	e8 0f       	add	r30, r24
 1d4:	f9 1f       	adc	r31, r25
 1d6:	80 81       	ld	r24, Z
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	8b bb       	out	0x1b, r24	; 27
 1dc:	e2 e4       	ldi	r30, 0x42	; 66
 1de:	f7 e0       	ldi	r31, 0x07	; 7
 1e0:	31 97       	sbiw	r30, 0x01	; 1
			_delay_ms(1);
			
			on = time%10;
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0xd4>
 1e4:	c9 01       	movw	r24, r18
 1e6:	b7 01       	movw	r22, r14
 1e8:	36 d0       	rcall	.+108    	; 0x256 <__divmodhi4>
			DDRD = 0X80;
 1ea:	40 e8       	ldi	r20, 0x80	; 128
 1ec:	41 bb       	out	0x11, r20	; 17
			PORTA = arr[on];
 1ee:	fc 01       	movw	r30, r24
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	8c 0f       	add	r24, r28
 1fa:	9d 1f       	adc	r25, r29
 1fc:	e8 0f       	add	r30, r24
 1fe:	f9 1f       	adc	r31, r25
 200:	80 81       	ld	r24, Z
 202:	8b bb       	out	0x1b, r24	; 27
 204:	e2 e4       	ldi	r30, 0x42	; 66
 206:	f7 e0       	ldi	r31, 0x07	; 7
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <main+0xfc>
	EIMSK = 0x60;
	EICRB = 0x3C;
	sei();
	
	while(time >= 0){
		for(int i = 25; i > 0; i--){
 20c:	01 50       	subi	r16, 0x01	; 1
 20e:	11 09       	sbc	r17, r1
 210:	02 c0       	rjmp	.+4      	; 0x216 <main+0x10a>
 212:	09 e1       	ldi	r16, 0x19	; 25
 214:	10 e0       	ldi	r17, 0x00	; 0
 216:	10 16       	cp	r1, r16
 218:	11 06       	cpc	r1, r17
 21a:	0c f4       	brge	.+2      	; 0x21e <main+0x112>
 21c:	9b cf       	rjmp	.-202    	; 0x154 <main+0x48>
			on = time%10;
			DDRD = 0X80;
			PORTA = arr[on];
			_delay_ms(1);
		}
		if(stop == 0){
 21e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 222:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 226:	89 2b       	or	r24, r25
 228:	19 f4       	brne	.+6      	; 0x230 <main+0x124>
			time--;
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	31 09       	sbc	r19, r1
 22e:	02 c0       	rjmp	.+4      	; 0x234 <main+0x128>
		}else{
			time = 9999;
 230:	2f e0       	ldi	r18, 0x0F	; 15
 232:	37 e2       	ldi	r19, 0x27	; 39
	
	EIMSK = 0x60;
	EICRB = 0x3C;
	sei();
	
	while(time >= 0){
 234:	33 23       	and	r19, r19
 236:	6c f7       	brge	.-38     	; 0x212 <main+0x106>
		//}
		//PORTA = 0xBF;
	//}
	
	return 0;
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	64 96       	adiw	r28, 0x14	; 20
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	08 95       	ret

00000256 <__divmodhi4>:
 256:	97 fb       	bst	r25, 7
 258:	07 2e       	mov	r0, r23
 25a:	16 f4       	brtc	.+4      	; 0x260 <__divmodhi4+0xa>
 25c:	00 94       	com	r0
 25e:	06 d0       	rcall	.+12     	; 0x26c <__divmodhi4_neg1>
 260:	77 fd       	sbrc	r23, 7
 262:	08 d0       	rcall	.+16     	; 0x274 <__divmodhi4_neg2>
 264:	0b d0       	rcall	.+22     	; 0x27c <__udivmodhi4>
 266:	07 fc       	sbrc	r0, 7
 268:	05 d0       	rcall	.+10     	; 0x274 <__divmodhi4_neg2>
 26a:	3e f4       	brtc	.+14     	; 0x27a <__divmodhi4_exit>

0000026c <__divmodhi4_neg1>:
 26c:	90 95       	com	r25
 26e:	81 95       	neg	r24
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	08 95       	ret

00000274 <__divmodhi4_neg2>:
 274:	70 95       	com	r23
 276:	61 95       	neg	r22
 278:	7f 4f       	sbci	r23, 0xFF	; 255

0000027a <__divmodhi4_exit>:
 27a:	08 95       	ret

0000027c <__udivmodhi4>:
 27c:	aa 1b       	sub	r26, r26
 27e:	bb 1b       	sub	r27, r27
 280:	51 e1       	ldi	r21, 0x11	; 17
 282:	07 c0       	rjmp	.+14     	; 0x292 <__udivmodhi4_ep>

00000284 <__udivmodhi4_loop>:
 284:	aa 1f       	adc	r26, r26
 286:	bb 1f       	adc	r27, r27
 288:	a6 17       	cp	r26, r22
 28a:	b7 07       	cpc	r27, r23
 28c:	10 f0       	brcs	.+4      	; 0x292 <__udivmodhi4_ep>
 28e:	a6 1b       	sub	r26, r22
 290:	b7 0b       	sbc	r27, r23

00000292 <__udivmodhi4_ep>:
 292:	88 1f       	adc	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	5a 95       	dec	r21
 298:	a9 f7       	brne	.-22     	; 0x284 <__udivmodhi4_loop>
 29a:	80 95       	com	r24
 29c:	90 95       	com	r25
 29e:	bc 01       	movw	r22, r24
 2a0:	cd 01       	movw	r24, r26
 2a2:	08 95       	ret

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
